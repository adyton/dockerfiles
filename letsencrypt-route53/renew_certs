#!/bin/bash
set -e

get_env_var() {
    local container="$1"
    local var_name="$2"
    docker inspect -f '{{ range .Config.Env }}{{ println . }}{{ end }}' "$container" | \
        awk "/^${var_name}=/ { sub(\"${var_name}=\", \"\"); print }"
    return ${PIPESTATUS[0]}
}

gen_alias() {
    echo "$1" | sed -e 's/\*\./star_/g' -e 's/\./_/g'
}

args=()
[[ "$1" == '-f' ]] && args+=('--force')

export DOCKER_HOST="${DOCKER_HOST:-unix:///tmp/docker.sock}"

if [[ -z "$AWS_ACCESS_KEY_ID" && -s "$AWS_ACCESS_KEY_ID_FILE" ]]; then
    export AWS_ACCESS_KEY_ID="$(tr -d '[:space:]' < "$AWS_ACCESS_KEY_ID_FILE")"
fi

if [[ -z "$AWS_SECRET_ACCESS_KEY" && -s "$AWS_SECRET_ACCESS_KEY_FILE" ]]; then
    export AWS_SECRET_ACCESS_KEY="$(tr -d '[:space:]' < "$AWS_SECRET_ACCESS_KEY_FILE")"
fi

# generate a list of domains
for id in $(docker ps -q --no-trunc); do
    virtual_host="$(get_env_var $id VIRTUAL_HOST)" || continue
    cert_cn="$(get_env_var $id CERT_CN)" || continue
    # VIRTUAL_HOST must always be set
    [[ -n "$virtual_host" ]] || continue
    echo "$virtual_host $cert_cn"
done > /tmp/domains_dump

# generate domains.txt
while read virtual_host cert_cn; do
    if [[ -n "$cert_cn" ]]; then
        echo "$cert_cn > $(gen_alias "$cert_cn")"
    elif [[ -n "$virtual_host" ]]; then
        echo "$virtual_host"
    fi
done < /tmp/domains_dump | sort | uniq > /tmp/domains.txt

# generate certificates
/opt/dehydrated/dehydrated -f /tmp/dehydrated_config --register --accept-terms
/opt/dehydrated/dehydrated -f /tmp/dehydrated_config -c "${args[@]}"

# create symlinks
while read virtual_host cert_cn; do
    if [[ -n "$cert_cn" ]]; then
        cert_dir="$(gen_alias "$cert_cn")"
    elif [[ -n "$virtual_host" ]]; then
        cert_dir="$virtual_host"
    fi
    ln -sf "${cert_dir}/cert.pem" "/certs/${virtual_host}.crt"
    ln -sf "${cert_dir}/privkey.pem" "/certs/${virtual_host}.key"
    ln -sf "${cert_dir}/chain.pem" "/certs/${virtual_host}.chain.pem"
done < /tmp/domains_dump

# reload certs in containers
for id in $(docker ps -q --no-trunc); do
    cmd="$(get_env_var $id RELOAD_CERTS_CMD)" || continue
    [[ -n "$cmd" ]] || continue
    docker exec $id sh -c "$cmd" || continue
done

exit 0
